-- DEMO

-- Example taken from Frenetic (POPL'14)
-- Sample topology (from Fig 8):
--       _______       _______
--  h₁ --1      |     |      2-- h₂
--      |   A  5-------6  B   |
--  h₃ --3      |     |      4-- h₄
--       -------       -------

-- Two switches (A and B)
-- Switch A has 3 ports, numbered 1, 3 and 5
-- Switch B has 3 ports, numbered 2, 4 and 6
-- Hosts are connected at A.1, A.3, B.2 and B.4
-- and A.5 and B.6 are connected together

-- v Naming switches
A = 0
B = 1

-- v Defining the topology
topo = (@sw=A?⋅@pt=5?⋅@sw←B⋅@pt←6) ∪
       (@sw=B?⋅@pt=6?⋅@sw←A⋅@pt←5) ∪
       (@sw=A?⋅@pt=1?) ∪
       (@sw=A?⋅@pt=3?) ∪
       (@sw=B?⋅@pt=2?) ∪
       (@sw=B?⋅@pt=4?)

-- v Naming Hosts
h₁ = (@sw=A?⋅@pt=1?)
h₂ = (@sw=B?⋅@pt=2?)
h₃ = (@sw=A?⋅@pt=3?)
h₄ = (@sw=B?⋅@pt=4?)


-- ROUTING POLICY

-- We can define a policy routing packets
-- between host 1 (A.1) and host 2 (B.2)
--       _______       _______
--  h₁ --1--,   |     |   ,--2-- h₂
--      |   '--5-------6--'   |
--  h₃ --3      |     |      4-- h₄
--       -------       -------

-- v Connect A.1 with A.5
pa₁ = @sw=A?⋅(@pt=5?⋅@pt←1 ∪ @pt=1?⋅@pt←5)
-- v Connect B.2 with B.6
pb₁ = @sw=B?⋅(@pt=6?⋅@pt←2 ∪ @pt=2?⋅@pt←6)

p₁ = pa₁ ∪ pb₁


-- REACHABILITY

-- This is usually of the form (from 𝑎 to 𝑏)
-- 𝑎 ⋅ (𝑝 ⋅ 𝑡 ⋅ δ)* ⋅ 𝑏 ≢ ∅
-- v some packets from h₁ reach h₂
check h₁⋅(p₁⋅topo⋅δ)⋆⋅h₂ ≢ ∅
-- v no packet from h₁ reaches h₄
check h₁⋅(p₁⋅topo⋅δ)⋆⋅h₄ ≡ ∅


-- SLICING

-- New policy wants to route traffic
-- between host 3 (A.3) and host 4 (B.4)
--       _______       _______
--  h₁ --1      |     |      2-- h₂
--      |   ,--5-------6--,   |
--  h₃ --3--'   |     |   '--4-- h₄
--       -------       -------

-- v Connect A.3 and A.5 
pa₂ = @sw=A?⋅(@pt=5?⋅@pt←3 ∪ @pt=3?⋅@pt←5)
-- v Connect B.4 and B.6
pb₂ = @sw=B?⋅(@pt=6?⋅@pt←4 ∪ @pt=4?⋅@pt←6)

p₂ = pa₂ ∪ pb₂

-- If we wanted to run both p₁ and p₂
-- at the same time on our network
-- we could take the union of both policy...
-- But this would have too many behaviors
check ((p₁∪p₂)⋅topo⋅δ)⋆ ≢ (p₁⋅topo⋅δ)⋆∪(p₂⋅topo⋅δ)⋆

-- For example,
-- v Some packets from h₁ reach h₄
check h₁⋅((p₁∪p₂)⋅topo⋅δ)⋆⋅h₄ ≢ ∅

-- We can define a slicing function
-- which tags the packets belonging
-- to the slice with a unique id
slice = λ p ⇒ λ inpred ⇒ λ outpred ⇒ λ w ⇒
  let pre = @tag=0?⋅inpred?⋅@tag←w ∪ @tag=w?
  let post = outpred? ⋅ @tag←0 ∪ ¬outpred?
  pre⋅p⋅post

-- v the first slice connects h₁ and h₂
in₁ = @sw=A∧@pt=1 ∨ @sw=B∧@pt=2
out₁ = @sw=A∧@pt=1 ∨ @sw=B∧@pt=2
s₁ = slice p₁ in₁ out₁ 1

-- v the second slice connects h₃ and h₄
in₂ = @sw=A∧@pt=3 ∨ @sw=B∧@pt=4
out₂ = @sw=A∧@pt=3 ∨ @sw=B∧@pt=4
s₂ = slice p₂ in₂ out₂ 2

-- We can check that the resulting policy is what we want...
-- v h₁ is connected to h₂
check h₁⋅((s₁∪s₂)⋅topo⋅δ)⋆⋅h₂ ≢ ∅
-- v h₃ is connected to h₄
check h₃⋅((s₁∪s₂)⋅topo⋅δ)⋆⋅h₄ ≢ ∅
-- v h₁ is not connected to h₄
check h₁⋅((s₁∪s₂)⋅topo⋅δ)⋆⋅h₄ ≡ ∅
-- v h₃ is not connected to h₂
check h₃⋅((s₁∪s₂)⋅topo⋅δ)⋆⋅h₂ ≡ ∅

-- v we can show that s₁ and s₂ do not affect each others
check ((s₁∪s₂)⋅topo⋅δ)⋆ ≡ (s₁⋅topo⋅δ)⋆∪(s₂⋅topo⋅δ)⋆

-- However, the following is not the same
-- since routing in s₁ and s₂ tags packets
check ((s₁∪s₂)⋅topo⋅δ)⋆ ≢ (p₁⋅topo⋅δ)⋆∪(p₂⋅topo⋅δ)⋆

